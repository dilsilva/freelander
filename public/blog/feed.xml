<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>%!s(&lt;nil>) - Blog</title><link>http://localhost:1313/blog/</link><description/><generator>Hugo 0.147.9</generator><language/><lastBuildDate>Mon, 15 Jan 2024 10:00:00 -0700</lastBuildDate><atom:link href="http://localhost:1313/blog/" rel="self" type="application/rss+xml"/><managingEditor> ()</managingEditor><webMaster> ()</webMaster><copyright>Copyright 2025</copyright><item><title>Building a Design System from Scratch: A Complete Case Study</title><link>http://localhost:1313/blog/design-system-case-study/</link><pubDate>Mon, 15 Jan 2024 10:00:00 -0700</pubDate><guid>http://localhost:1313/blog/design-system-case-study/</guid><description>&lt;![CDATA[How I built a comprehensive design system for a growing SaaS company, including the challenges, solutions, and measurable results.]]></description><content:encoded>&lt;![CDATA[<p>When DataFlow Pro approached me to create their first design system, they were facing a common problem: inconsistent UI across their product suite, slow development cycles, and a frustrated design team working with dozens of one-off components.</p><p>Six months later, we had built a comprehensive design system that reduced development time by 40% and established visual consistency across 12 product areas.</p><p>Here&rsquo;s how we did it.</p><h2 id="the-challenge">The Challenge</h2><p>DataFlow Pro had grown rapidly from startup to scale-up, but their design infrastructure hadn&rsquo;t kept pace. The symptoms were familiar:</p><ul><li><strong>Inconsistent UI</strong>: Buttons had 6 different styles across the platform</li><li><strong>Slow Development</strong>: Developers were recreating components for each new feature</li><li><strong>Design Debt</strong>: No centralized source of truth for colors, typography, or spacing</li><li><strong>Team Frustration</strong>: Designers spending 60% of their time on repetitive tasks</li></ul><p>The CEO put it simply: &ldquo;We need to move faster without sacrificing quality.&rdquo;</p><h2 id="research--discovery-phase">Research &amp; Discovery Phase</h2><p>Before diving into Figma, I spent two weeks understanding the existing ecosystem:</p><h3 id="audit-findings">Audit Findings</h3><ul><li><strong>47 unique button variations</strong> across the platform</li><li><strong>23 different font sizes</strong> (with no clear hierarchy)</li><li><strong>Color inconsistencies</strong>: 15 different shades of their brand blue</li><li><strong>Component debt</strong>: 200+ one-off components in design files</li></ul><h3 id="team-interviews">Team Interviews</h3><p>I interviewed 8 team members across design, development, and product:</p><p><strong>Key Insights:</strong></p><ul><li>Designers wanted more time for creative problem-solving</li><li>Developers needed clear specifications and reusable code</li><li>Product managers needed faster iteration cycles</li><li>Everyone wanted better communication between design and development</li></ul><h2 id="the-system-architecture">The System Architecture</h2><p>Based on my research, I designed a system with four foundational layers:</p><h3 id="1-design-tokens">1. Design Tokens</h3><p>The atomic level of the system - colors, typography, spacing, and shadows.</p><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* Color Tokens */</span></span></span><span class="line"><span class="cl"><span class="nt">--primary-500</span><span class="o">:</span><span class="p">#</span><span class="nn">2563eb</span><span class="o">;</span></span></span><span class="line"><span class="cl"><span class="nt">--primary-600</span><span class="o">:</span><span class="p">#</span><span class="nn">1d4ed8</span><span class="o">;</span></span></span><span class="line"><span class="cl"><span class="nt">--neutral-100</span><span class="o">:</span><span class="p">#</span><span class="nn">f5f5f5</span><span class="o">;</span></span></span><span class="line"><span class="cl"/></span><span class="line"><span class="cl"><span class="c">/* Spacing Scale */</span></span></span><span class="line"><span class="cl"><span class="nt">--space-xs</span><span class="o">:</span><span class="nt">4px</span><span class="o">;</span></span></span><span class="line"><span class="cl"><span class="nt">--space-sm</span><span class="o">:</span><span class="nt">8px</span><span class="o">;</span></span></span><span class="line"><span class="cl"><span class="nt">--space-md</span><span class="o">:</span><span class="nt">16px</span><span class="o">;</span></span></span><span class="line"><span class="cl"><span class="nt">--space-lg</span><span class="o">:</span><span class="nt">24px</span><span class="o">;</span></span></span></code></pre></div><h3 id="2-foundation-components">2. Foundation Components</h3><p>Basic building blocks like buttons, inputs, and typography.</p><h3 id="3-pattern-components">3. Pattern Components</h3><p>More complex, composed components like cards, modals, and navigation.</p><h3 id="4-template-components">4. Template Components</h3><p>Page-level layouts and complete interface patterns.</p><h2 id="implementation-strategy">Implementation Strategy</h2><h3 id="phase-1-foundation-weeks-1-3">Phase 1: Foundation (Weeks 1-3)</h3><ul><li>Established design tokens in Figma</li><li>Created core component library</li><li>Set up developer handoff documentation</li></ul><h3 id="phase-2-adoption-weeks-4-8">Phase 2: Adoption (Weeks 4-8)</h3><ul><li>Migrated existing designs to new system</li><li>Built React component library</li><li>Created comprehensive style guide</li></ul><h3 id="phase-3-scale-weeks-9-12">Phase 3: Scale (Weeks 9-12)</h3><ul><li>Advanced components and patterns</li><li>Team training and onboarding</li><li>Maintenance and iteration processes</li></ul><h2 id="key-design-decisions">Key Design Decisions</h2><h3 id="component-api-design">Component API Design</h3><p>Each component was designed with a clear, predictable API:</p><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">Button</span></span></span><span class="line"><span class="cl"><span class="na">variant</span><span class="o">=</span><span class="s">"primary"</span></span></span><span class="line"><span class="cl"><span class="na">size</span><span class="o">=</span><span class="s">"medium"</span></span></span><span class="line"><span class="cl"><span class="na">disabled</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span></span></span><span class="line"><span class="cl"><span class="na">loading</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span></span></span><span class="line"><span class="cl"><span class="p">></span></span></span><span class="line"><span class="cl"><span class="nx">Save</span><span class="nx">Changes</span></span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">Button</span><span class="p">></span></span></span></code></pre></div><h3 id="documentation-first">Documentation First</h3><p>Every component included:</p><ul><li>Usage guidelines</li><li>Do&rsquo;s and Don&rsquo;ts</li><li>Accessibility notes</li><li>Code examples</li></ul><h3 id="scalable-color-system">Scalable Color System</h3><p>Instead of named colors, we used a numerical scale:</p><ul><li><code>primary-100</code> to<code>primary-900</code></li><li><code>neutral-100</code> to<code>neutral-900</code></li><li><code>semantic colors</code> for success, warning, error</li></ul><p>This allowed for easy dark mode implementation later.</p><h2 id="results--impact">Results &amp; Impact</h2><p>Six months post-launch, the results exceeded expectations:</p><h3 id="development-metrics">Development Metrics</h3><ul><li><strong>40% reduction</strong> in component development time</li><li><strong>60% fewer</strong> design-development iteration cycles</li><li><strong>25% faster</strong> feature delivery</li></ul><h3 id="team-productivity">Team Productivity</h3><ul><li>Designers spending<strong>80% more time</strong> on user research and strategy</li><li><strong>90% reduction</strong> in &ldquo;pixel-pushing&rdquo; tasks</li><li>New developer onboarding time reduced by<strong>3 weeks</strong></li></ul><h3 id="quality-improvements">Quality Improvements</h3><ul><li><strong>Zero accessibility violations</strong> in new features</li><li><strong>Consistent brand experience</strong> across all touchpoints</li><li><strong>50% reduction</strong> in user interface bugs</li></ul><h2 id="lessons-learned">Lessons Learned</h2><h3 id="what-worked-well">What Worked Well</h3><p><strong>1. Start with Tokens</strong>
Building from the ground up with design tokens made everything else scalable.</p><p><strong>2. Include Developers Early</strong>
Having engineering input from day one prevented adoption issues later.</p><p><strong>3. Document Everything</strong>
Comprehensive documentation was crucial for team adoption.</p><h3 id="what-id-do-differently">What I&rsquo;d Do Differently</h3><p><strong>1. Migrate Gradually</strong>
Trying to migrate everything at once created temporary inconsistencies. A gradual rollout would have been smoother.</p><p><strong>2. Plan for Governance Earlier</strong>
We should have established update and maintenance processes from the beginning.</p><p><strong>3. User Test Components</strong>
Some components looked great in isolation but caused usability issues in real interfaces.</p><h2 id="the-ongoing-journey">The Ongoing Journey</h2><p>A design system is never &ldquo;done.&rdquo; Six months later, we&rsquo;ve:</p><ul><li>Added 23 new components</li><li>Implemented dark mode support</li><li>Extended the system to mobile apps</li><li>Open-sourced the React library</li></ul><p>The system has become the foundation for DataFlow Pro&rsquo;s design culture, enabling faster innovation while maintaining quality and consistency.</p><h2 id="tools--resources">Tools &amp; Resources</h2><p><strong>Design</strong>: Figma with advanced component properties<br><strong>Development</strong>: React + Styled Components<br><strong>Documentation</strong>: Storybook + MDX<br><strong>Tokens</strong>: Style Dictionary for cross-platform export</p><hr><p><em>Want to learn more about building design systems? Feel free to<a href="/contact">reach out</a> - I love talking about systematic design approaches.</em></p>
]]></content:encoded><author> (Alex Rivera)</author><category>Case Study</category><category>Design Process</category><enclosure url="http://localhost:1313/img/blog/design-system-hero.jpg" type="image/jpeg"/></item><item><title>5 Principles of User-Centered Design That Actually Work</title><link>http://localhost:1313/blog/5-principles-user-centered-design/</link><pubDate>Mon, 08 Jan 2024 14:30:00 -0700</pubDate><guid>http://localhost:1313/blog/5-principles-user-centered-design/</guid><description>&lt;![CDATA[Practical principles for putting users first in your design process, backed by real examples and actionable tips.]]></description><content:encoded>&lt;![CDATA[<p>After 8 years of designing digital products, I&rsquo;ve seen countless &ldquo;user-centered&rdquo; projects that somehow forgot about the users. The term gets thrown around so much that it&rsquo;s lost meaning.</p><p>Real user-centered design isn&rsquo;t about following a checklist—it&rsquo;s about fundamentally shifting how you approach problems. Here are 5 principles that have consistently led to better outcomes in my work.</p><h2 id="1-start-with-problems-not-solutions">1. Start with Problems, Not Solutions</h2><p><strong>The Principle</strong>: Understand what users are trying to accomplish before deciding how to help them.</p><p>Most projects start with a solution in mind: &ldquo;We need a mobile app&rdquo; or &ldquo;Let&rsquo;s add a chatbot.&rdquo; But users don&rsquo;t care about your technology choices—they care about getting their job done.</p><h3 id="in-practice">In Practice</h3><p><strong>Bad approach</strong>: &ldquo;Our competitors have a mobile app, so we need one too.&rdquo;</p><p><strong>Good approach</strong>: &ldquo;Our users are frequently away from their desks. How might we help them stay productive while mobile?&rdquo;</p><h3 id="real-example">Real Example</h3><p>When redesigning a project management tool, the client insisted on adding more features. But user interviews revealed that people were overwhelmed by existing functionality.</p><p>Instead of adding features, we focused on progressive disclosure and smart defaults. User satisfaction increased 40% while feature usage per session actually decreased.</p><p><strong>Key Question</strong>: What job is the user trying to get done?</p><h2 id="2-design-for-the-journey-not-just-the-destination">2. Design for the Journey, Not Just the Destination</h2><p><strong>The Principle</strong>: Consider the entire user experience, from first awareness to long-term usage.</p><p>It&rsquo;s easy to focus on the core functionality while ignoring onboarding, edge cases, and maintenance tasks. But users experience your product holistically.</p><h3 id="the-hidden-moments">The Hidden Moments</h3><ul><li><strong>Empty states</strong>: What happens when users have no data yet?</li><li><strong>Error states</strong>: How do you handle things going wrong?</li><li><strong>Loading states</strong>: What do users see while waiting?</li><li><strong>Success states</strong>: How do you celebrate user achievements?</li></ul><h3 id="real-example-1">Real Example</h3><p>An e-commerce client was frustrated with high cart abandonment. Analytics showed users were dropping off at checkout, so they wanted to simplify the payment form.</p><p>But research revealed the real issue: users were getting cold feet because they couldn&rsquo;t easily find return policies and shipping information at the decision moment.</p><p>We redesigned the entire purchase journey, not just the checkout form. Cart abandonment dropped 25%.</p><p><strong>Key Question</strong>: What does the user need at each step of their journey?</p><h2 id="3-test-early-test-often-test-realistically">3. Test Early, Test Often, Test Realistically</h2><p><strong>The Principle</strong>: Validate assumptions with real users in realistic contexts, throughout the design process.</p><p>&ldquo;Testing&rdquo; doesn&rsquo;t mean showing polished mockups to stakeholders. It means observing real people using real or realistic prototypes to accomplish real goals.</p><h3 id="testing-at-different-fidelities">Testing at Different Fidelities</h3><p><strong>Paper prototypes</strong>: Perfect for testing core concepts and information architecture<strong>Digital wireframes</strong>: Great for testing task flows and content structure<br><strong>Interactive prototypes</strong>: Essential for testing micro-interactions and usability<strong>Beta releases</strong>: Critical for testing at scale with real data</p><h3 id="real-example-2">Real Example</h3><p>We spent weeks perfecting a dashboard interface in Figma. The prototype tested beautifully in controlled settings.</p><p>But when we tested with real user data, everything broke. The beautiful grid layout couldn&rsquo;t handle variable content lengths. Users&rsquo; actual data was messier than our sanitized examples.</p><p>We pivoted to a flexible, content-first layout that adapted to real-world usage patterns.</p><p><strong>Key Question</strong>: How can we test this assumption with real users, real tasks, and real constraints?</p><h2 id="4-embrace-constraints-as-creative-catalysts">4. Embrace Constraints as Creative Catalysts</h2><p><strong>The Principle</strong>: Design within real-world limitations rather than fighting them.</p><p>Accessibility requirements, technical constraints, and business limitations aren&rsquo;t obstacles to creativity—they&rsquo;re creative challenges that lead to better solutions.</p><h3 id="common-constraints-that-improve-design">Common Constraints That Improve Design</h3><p><strong>Performance budgets</strong>: Force prioritization of essential content<strong>Accessibility standards</strong>: Create more inclusive, clearer interfaces<strong>Mobile-first</strong>: Encourage focused, purposeful interactions<strong>Legacy system integration</strong>: Prevent over-engineering</p><h3 id="real-example-3">Real Example</h3><p>A healthcare app needed to work on outdated tablets with poor internet connectivity. These constraints seemed limiting until we realized they matched our users&rsquo; reality perfectly.</p><p>Instead of fighting the constraints, we designed for them:</p><ul><li>Offline-first architecture</li><li>High contrast, large touch targets</li><li>Progressive enhancement for better connections</li></ul><p>The result was more usable for everyone, not just users with technical limitations.</p><p><strong>Key Question</strong>: How might these constraints actually improve the user experience?</p><h2 id="5-make-data-driven-decisions-but-dont-worship-data">5. Make Data-Driven Decisions, But Don&rsquo;t Worship Data</h2><p><strong>The Principle</strong>: Use quantitative data to identify problems and measure success, but rely on qualitative insights to understand why and how to fix them.</p><p>Analytics can tell you where users are dropping off, but only user research can tell you why. Surveys can measure satisfaction, but only observation can reveal what users actually do versus what they say.</p><h3 id="the-right-data-for-the-right-questions">The Right Data for the Right Questions</h3><p><strong>Quantitative data answers</strong>: What, when, where, how much?</p><ul><li>Conversion rates, task completion times, error frequencies</li></ul><p><strong>Qualitative data answers</strong>: Why, how, what if?</p><ul><li>User motivations, mental models, emotional responses</li></ul><h3 id="real-example-4">Real Example</h3><p>Analytics showed that 60% of users were abandoning a multi-step form on step 2. The obvious solution was to shorten the form.</p><p>But user testing revealed something different: people weren&rsquo;t leaving because the form was too long—they were leaving because they didn&rsquo;t trust the site with their information. Step 2 asked for sensitive data without explaining why it was needed.</p><p>Instead of shortening the form, we added clear explanations and trust signals. Abandonment dropped to 20%.</p><p><strong>Key Question</strong>: What story do the numbers tell, and what questions should we ask users to understand that story?</p><h2 id="putting-it-all-together">Putting It All Together</h2><p>User-centered design isn&rsquo;t a methodology you can follow blindly. It&rsquo;s a mindset that puts user needs at the center of every decision.</p><p>These principles work because they acknowledge a fundamental truth: users don&rsquo;t care about your internal processes, technical constraints, or business goals. They care about accomplishing their own goals as easily and efficiently as possible.</p><p>When you truly embrace that perspective, everything else follows.</p><hr><p><em>What principles guide your design process? I&rsquo;d love to hear about your experiences with user-centered design. Drop me a line at<a href="mailto:alex@example.com">alex@example.com</a>.</em></p>
]]></content:encoded><author> (Alex Rivera)</author><category>Design Process</category><category>Industry Insights</category><enclosure url="http://localhost:1313/img/blog/ux-principles-hero.jpg" type="image/jpeg"/></item><item><title>My Figma Workflow: How I Design 40% Faster</title><link>http://localhost:1313/blog/figma-workflow-optimization/</link><pubDate>Tue, 02 Jan 2024 09:15:00 -0700</pubDate><guid>http://localhost:1313/blog/figma-workflow-optimization/</guid><description>&lt;![CDATA[A detailed breakdown of my optimized Figma workflow, including custom shortcuts, component strategies, and time-saving techniques.]]></description><content:encoded>&lt;![CDATA[<p>Last year, I tracked my design time and discovered I was spending 3 hours daily on repetitive Figma tasks. That&rsquo;s 15 hours per week that could be spent on actual design thinking.</p><p>So I optimized my workflow. Here&rsquo;s what I learned and the exact system I use now.</p><h2 id="the-time-audit-results">The Time Audit Results</h2><p>Before optimizing, I spent time on:</p><ul><li><strong>25%</strong>: Looking for components and assets</li><li><strong>20%</strong>: Manually organizing layers</li><li><strong>15%</strong>: Recreating common layouts</li><li><strong>15%</strong>: Adjusting typography and spacing</li><li><strong>25%</strong>: Actual creative design work</li></ul><p>This was backwards. I was spending 75% of my time on mechanical tasks.</p><h2 id="my-5-part-optimization-strategy">My 5-Part Optimization Strategy</h2><h3 id="1-master-the-keyboard-save-8-minuteshour">1. Master the Keyboard (Save 8+ Minutes/Hour)</h3><p>I memorized these shortcuts and never looked back:</p><p><strong>Essential shortcuts:</strong></p><ul><li><code>Cmd + /</code>: Quick actions (my most-used shortcut)</li><li><code>Cmd + D</code>: Duplicate in place</li><li><code>Cmd + Shift + G</code>: Ungroup</li><li><code>Option + Cmd + C/V</code>: Copy/paste properties</li><li><code>Cmd + Shift + H</code>: Hide/show UI</li></ul><p><strong>Advanced shortcuts:</strong></p><ul><li><code>Cmd + Option + Arrow</code>: Nudge by 10px</li><li><code>Shift + 2</code>: Zoom to selection</li><li><code>Cmd + Y</code>: Quick switch between tools</li></ul><p><strong>Pro tip</strong>: Use<code>Cmd + /</code> then type what you want to do. It&rsquo;s faster than remembering individual shortcuts for complex actions.</p><h3 id="2-build-a-personal-component-system">2. Build a Personal Component System</h3><p>Instead of using random components, I created a personal library with:</p><p><strong>Base Components:</strong></p><ul><li>Typography scale (6 text styles)</li><li>Color palette (primary, secondary, neutrals)</li><li>Spacing system (4px grid)</li><li>Icon library (200+ consistent icons)</li></ul><p><strong>Layout Components:</strong></p><ul><li>Page templates</li><li>Section layouts</li><li>Card patterns</li><li>Form structures</li></ul><p><strong>Time saved</strong>: 45 minutes per project setup</p><h3 id="3-layer-organization-that-actually-works">3. Layer Organization That Actually Works</h3><p>My naming convention:</p><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">📁 01 - Header</span></span><span class="line"><span class="cl">📁 02 - Navigation</span></span><span class="line"><span class="cl">📁 03 - Content</span></span><span class="line"><span class="cl"> 📁 Hero Section</span></span><span class="line"><span class="cl"> 📁 Features</span></span><span class="line"><span class="cl"> 📁 Testimonials</span></span><span class="line"><span class="cl">📁 04 - Footer</span></span></code></pre></div><p><strong>Rules:</strong></p><ul><li>Number major sections for automatic sorting</li><li>Use consistent naming patterns</li><li>Group related elements immediately</li><li>Delete unused layers obsessively</li></ul><h3 id="4-smart-component-strategies">4. Smart Component Strategies</h3><p><strong>Create components for anything used 2+ times:</strong></p><ul><li>Button variations</li><li>Card layouts</li><li>Form fields</li><li>Icon + text combinations</li></ul><p><strong>Use component properties for variants:</strong></p><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Button Component Properties:</span></span><span class="line"><span class="cl">- Type: Primary, Secondary, Ghost</span></span><span class="line"><span class="cl">- Size: Small, Medium, Large</span></span><span class="line"><span class="cl">- State: Default, Hover, Disabled</span></span><span class="line"><span class="cl">- Icon: Boolean (show/hide)</span></span></code></pre></div><p><strong>Nested components for complex patterns:</strong>
Card component contains:</p><ul><li>Typography components</li><li>Button components</li><li>Icon components</li></ul><h3 id="5-automation-and-plugins">5. Automation and Plugins</h3><p><strong>Essential plugins I use daily:</strong></p><p><strong>Content Reel</strong>: Realistic text and images<br><strong>Unsplash</strong>: High-quality photos<br><strong>Iconify</strong>: Massive icon library<br><strong>Autoflow</strong>: Automatic user flow diagrams<br><strong>Figma Tokens</strong>: Design token management</p><p><strong>Custom shortcuts through plugins:</strong></p><ul><li>Bulk rename layers</li><li>Consistent spacing application</li><li>Color palette generation</li></ul><h2 id="my-daily-figma-routine">My Daily Figma Routine</h2><h3 id="project-setup-5-minutes">Project Setup (5 minutes)</h3><ol><li>Duplicate base template</li><li>Import project-specific components</li><li>Set up grid system</li><li>Configure color styles</li></ol><h3 id="during-design-ongoing">During Design (Ongoing)</h3><ol><li>Work mobile-first, then scale up</li><li>Use components for everything repeatable</li><li>Organize layers as I go (not at the end)</li><li>Comment liberally for handoff</li></ol><h3 id="before-handoff-10-minutes">Before Handoff (10 minutes)</h3><ol><li>Clean up unused layers</li><li>Verify component consistency</li><li>Add developer notes</li><li>Export assets systematically</li></ol><h2 id="advanced-techniques">Advanced Techniques</h2><h3 id="component-composition">Component Composition</h3><p>Instead of creating massive components with every variation, I compose smaller components:</p><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Card =</span></span><span class="line"><span class="cl"> Container Component +</span></span><span class="line"><span class="cl"> Typography Component +</span></span><span class="line"><span class="cl"> Button Component +</span></span><span class="line"><span class="cl"> Icon Component</span></span></code></pre></div><p>This is more flexible and maintainable.</p><h3 id="smart-layout-grids">Smart Layout Grids</h3><p>I use different grid systems for different needs:</p><p><strong>Mobile</strong>: 4-column grid, 16px gutters<br><strong>Tablet</strong>: 8-column grid, 20px gutters<br><strong>Desktop</strong>: 12-column grid, 24px gutters</p><p>Auto-layout handles spacing within components.</p><h3 id="prototyping-shortcuts">Prototyping Shortcuts</h3><ul><li>Link entire frames instead of individual elements</li><li>Use overlays for modals and dropdowns</li><li>Create reusable interaction patterns</li><li>Test on actual devices, not just desktop</li></ul><h2 id="results-after-6-months">Results After 6 Months</h2><p><strong>Time allocation now:</strong></p><ul><li><strong>5%</strong>: Looking for components (down from 25%)</li><li><strong>10%</strong>: Organizing (down from 20%)</li><li><strong>5%</strong>: Recreating layouts (down from 15%)</li><li><strong>10%</strong>: Typography/spacing (down from 15%)</li><li><strong>70%</strong>: Creative design work (up from 25%!)</li></ul><p><strong>Other benefits:</strong></p><ul><li>More consistent design outputs</li><li>Faster client iterations</li><li>Better developer handoffs</li><li>Less mental fatigue</li></ul><h2 id="getting-started">Getting Started</h2><p>Don&rsquo;t try to implement everything at once. Start with:</p><ol><li><strong>Week 1</strong>: Learn 5 essential keyboard shortcuts</li><li><strong>Week 2</strong>: Create your base component library</li><li><strong>Week 3</strong>: Establish layer organization habits</li><li><strong>Week 4</strong>: Add 2-3 essential plugins</li></ol><p>The key is building habits gradually rather than overhauling everything overnight.</p><hr><p><em>What&rsquo;s your biggest Figma time-waster? I&rsquo;m always looking for new optimization opportunities. Share your workflow challenges in the comments below.</em></p>
]]></content:encoded><author> (Alex Rivera)</author><category>Tutorial</category><category>Design Process</category><enclosure url="http://localhost:1313/img/blog/figma-workflow-hero.jpg" type="image/jpeg"/></item></channel></rss>